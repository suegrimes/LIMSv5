<script>
// handle freezer selection or de-selection
jQuery("select.freezer").on("change", function() {
var freezer = jQuery(this).val();
logger("got freezer change: "+freezer);
if (freezer == "") {
// remove all container options
remove_container_options();
return
}
// if a container type is also selected fill in the container select options
var container_type = jQuery("select.container-type").val();
if (container_type != "") {
var options = mk_container_select_options(window.container_data, freezer, container_type);
add_container_options(options);
// if a new container, go ahead and show the position UI
if (jQuery("input#new-container-check").prop("checked")) {
display_position_ui(container_type);
}
}
// move container types in this freezer to the top of list of options
// SG 6/15/2019: commenting this out since can end up with duplicate container-types when re-arranging
//arrange_container_types(jQuery("select.container-type"), freezer);
});

// handle container type selection or de-selection
jQuery("select.container-type").on("change", function() {
var container_type = jQuery(this).val();
logger("got container type change: "+container_type);
if (container_type == "") {
// remove all container options
remove_container_options();
return
}
// if a freezer is also selected fill in the container select options
var freezer = jQuery("select.freezer").val();
if (freezer != "") {
var options = mk_container_select_options(window.container_data, freezer, container_type);
add_container_options(options);
// if a new container, go ahead and show the position UI
if (jQuery("input#new-container-check").prop("checked")) {
display_position_ui(container_type);
}
}
});

// handle new container box checked
jQuery("input#new-container-check").on("change", function() {
var container_type = jQuery("select.container-type").val();
var container = jQuery("select.storage-container");
var container_name = jQuery(".container-name");
var container_notes = jQuery(".container-notes");
if (jQuery(this).prop("checked")) {
// disable existing container select
container.prop("disabled", true);
// enable and display new storage container fields
container_name.prop("disabled", false);
container_notes.prop("disabled", false);
display_new_fields();
// clear any prior position in container value
jQuery(".position-in-container input").val("");
// display the position ui
display_position_ui(container_type);
} else {
// not a new container, so enable selection of an existing one
container.prop("disabled", false);
container_name.prop("disabled", true);
container_notes.prop("disabled", true);
// if not a new container and no existing one is selected
// hide the UI for inputing the position
if (container.val() == "") {
hide_position_ui();
}
hide_new_fields();
}
});

// handle container selection or de-selection
jQuery("select.storage-container").on("change", function() {
var container = jQuery(this).val();
var container_type = jQuery("select.container-type").val();
logger("got container change: "+container);
if (container == "") {  // handle de-select
if (!jQuery("input#new-container-check").prop("checked")) {
hide_position_ui();
}
return;
}
// handle selected
display_position_ui(container_type);
});

// handle button to show container grid locations
// SG 6/15/2019: modify for current container now in text box not select
jQuery(".select-position-btn button").on("click", function() {
var container_type = jQuery("select.container-type").val();
if (container_type == null) {
var container_type = jQuery("input.container-type").val();
}

// check for and handle a new container
if (jQuery("input#new-container-check").prop("checked")) {
location_lightbox_init(container_type);
return;
}

// handle existing container
var container_id = get_storage_container_id();
if (container_id == null) {
my_alert("No storage container selected");
return;
}
var url = "/storage_containers/"+container_id+"/positions_used.json";
location_lightbox_init(container_type, url);
});

// see if container select optione need init
// this could happen in create action after an error
handle_freezer_cont_type();

</script>